{"version":3,"sources":["radio.js","exam.js","serviceWorker.js","index.js"],"names":["Radio","_this","this","react_default","a","createElement","Fragment","props","data","map","option","key","concat","letterOption","className","onClick","answerClick","name","type","id","React","Component","Exam","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchQuestion","asyncToGenerator","regenerator_default","mark","_callee","request","questions","wrap","_context","prev","next","fetch","method","headers","Content-Type","mode","sent","json","setState","setCountDown","stop","setLocalStorage","t","Date","setSeconds","getSeconds","countDown","getTime","localStorage","submitAnswer","requestBody","meta","firstName","lastName","studentId","courseId","courseName","timeLimit","totalQuestionNumber","elaspedTime","answers","state","answersArray","body","JSON","stringify","then","res","console","log","answerQuestion","candidateAnswer","questionNumber","present","_","findIndex","o","isMatch","removed","remove","n","modify","toConsumableArray","hours","seconds","minutes","self","setInterval","now","distance","Math","floor","hour","minute","second","_this2","_this$state","_this$state$questions","subject","taughtBy","quizQuestionNumber","eachPointWorth","totalPointAttainable","question","index","src_radio","e","y","options","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","exam_Exam","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f84d00e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Radio extends React.Component{\r\n    render(){\r\n    return(\r\n        <React.Fragment>\r\n        {this.props.data.map((option)=>\r\n        <li key={`radio_${option.letterOption}`} className=\"sub-option\">{option.letterOption}) <input onClick={()=>this.props.answerClick(option.letterOption, this.props.name)} type=\"radio\" name={this.props.name} id=\"option\"/> {option.option}</li>\r\n        )}\r\n        </React.Fragment>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Radio","import React from 'react';\r\nimport './main.css';\r\nimport Radio from './radio';\r\nimport _ from 'lodash';\r\n\r\nexport default class Exam extends React.PureComponent{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            questions: {},\r\n            hours: 0,\r\n            seconds: 0,\r\n            minutes: 0,\r\n            answersArray: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchQuestion();\r\n    }\r\n    fetchQuestion = async()=>{\r\n        const request = await fetch('http://localhost:3500/api/questions',{\r\n            method: 'GET',\r\n            headers: {'Content-Type': 'application/json'},\r\n            mode: 'cors'\r\n        })\r\n        const questions = await request.json();\r\n        await this.setState({questions},()=>{\r\n            this.setCountDown();\r\n        });\r\n    }\r\n    setLocalStorage = ()=>{\r\n        let t = new Date();\r\n        t.setSeconds(t.getSeconds() + 3600);\r\n        let countDown = t.getTime();\r\n        localStorage.countDown = countDown;\r\n    }\r\n    submitAnswer=()=>{\r\n        let meta = {\r\n            \"firstName\": \"Joe\",\r\n            \"lastName\": \"Jnr\",\r\n            \"studentId\": \"4514DW47\",\r\n            \"courseId\": \"7575145\",\r\n            \"courseName\": \"Chemistry\",\r\n            \"timeLimit\": \"3600\",\r\n            \"totalQuestionNumber\": 6,\r\n            \"elaspedTime\": \"3000\"\r\n          }\r\n          let requestBody = {meta, \"answers\": this.state.answersArray}\r\n          fetch('http://localhost:3500/api/questions/answer',{\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            mode: 'cors',\r\n            body: JSON.stringify(requestBody)\r\n          })\r\n          .then((res)=> res.json())\r\n          .then((data)=>console.log(data))\r\n    }\r\n    answerQuestion = (candidateAnswer, questionNumber)=>{\r\n        const {answersArray} = this.state;\r\n        let answers = {\r\n            candidateAnswer,\r\n            questionNumber\r\n        }\r\n        //check the answers array to see if exists if not push if it exists replace\r\n        const present = _.findIndex(this.state.answersArray, (o) => { return _.isMatch(o, {\"questionNumber\" :questionNumber}) }) > -1;\r\n        console.log(present)\r\n        if (!present){\r\n            let newArray = this.state.answersArray;\r\n            let modify = [...this.state.answersArray, answers]\r\n            this.setState({answersArray: modify},()=>{\r\n                console.log(modify)\r\n            })\r\n        }\r\n        else{\r\n            //omit and replace\r\n            const removed = _.remove(this.state.answersArray, function(n) {\r\n                return n.questionNumber != questionNumber\r\n            })\r\n            console.log(removed)\r\n            this.setState({answersArray: removed},()=>{\r\n                let newArray = this.state.answersArray;\r\n            let modify = [...this.state.answersArray, answers]\r\n            this.setState({answersArray: modify},()=>{\r\n                console.log(modify)\r\n            })\r\n            })\r\n        }\r\n    }\r\n    setCountDown(){\r\n        const second = 1000;\r\n        const minute = second * 60;\r\n        const hour = minute * 60;\r\n        const day = hour * 24;\r\n        let countDown;\r\n        let t = new Date();\r\n        t.setSeconds(t.getSeconds() + 3600);\r\n        \r\n        //localStorage.countDown = countDown;\r\n        //if (localStorage.getItem(\"countDown\") != null) {\r\n          //  countDown = parseInt(localStorage.countDown)\r\n        //}\r\n        //else{\r\n            countDown = t.getTime();\r\n        //}\r\n        var self = this;\r\n        const countdownTimer = setInterval(()=>{\r\n            let now = new Date().getTime();\r\n            let distance = countDown - now;\r\n            let hours = Math.floor((distance % (day)) / (hour));\r\n            let minutes = Math.floor((distance % (hour)) / (minute));\r\n            let seconds = Math.floor((distance % (minute)) / second);\r\n            self.setState({\r\n                hours,\r\n                minutes,\r\n                seconds\r\n            })\r\n        }, 1000)\r\n    }\r\n    render(){\r\n        const {hours, minutes, seconds} = this.state;\r\n        const {subject, courseId, taughtBy, questions, timeLimit, quizQuestionNumber, eachPointWorth, totalPointAttainable} = this.state.questions\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"sidebar\">\r\n                <h1>{subject}</h1>\r\n                <h4>Course ID: {courseId}</h4>\r\n                <h4>Professor: {taughtBy}</h4>\r\n                <ul className=\"list-stuff\">\r\n                    <li className=\"li\"><span id=\"hours\">{hours}</span>Hours</li>\r\n                    <li className=\"li\"><span id=\"minutes\">{minutes}</span>Minutes</li>\r\n                    <li className=\"li\"><span id=\"seconds\">{seconds}</span>Seconds</li>\r\n                </ul>\r\n                <button onClick={this.submitAnswer} className=\"primaryBtn\">Submit Now</button>\r\n                </div>\r\n                {this.state.questions.questions?\r\n                <div className=\"main\">\r\n                    {questions.map((question, index)=>\r\n                        <React.Fragment key={index}>\r\n                        <p className=\"question\" key={question.questionNumber}>{index + 1}. {question.question}</p>\r\n                        <ul className=\"options\">\r\n                            <Radio answerClick={(e, y)=>this.answerQuestion(e, y)} name={question.questionNumber} data={question.options} />\r\n                        </ul>\r\n                        </React.Fragment>\r\n                    )}\r\n                </div>\r\n                :null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport Exam from './exam';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Exam />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}